- 트리
    
    : 한 개 이상의 노드로 이루어진 유한 집합이며 다음 조건을 만족함
    
    - 노드 중 최상위 노드를 루트라 함
    - 나머지 노드들은 n(≥0)개의 분리 집합 T1, …, Tn으로 분리됨
    - 이들은 각각 하나의 트리가 되며(재귀적 정의) 루트의 부 트리(subtree)라 함
    
    ![image.png](attachment:ffbfb59b-c76e-4220-a8d1-c930a8d7d0a4:image.png)
    
    - 노드 - 트리의 원소
    - 간선(edge) - 노드를 연결하는 선, 부모 노드와 자식 노드를 연결
    - 루트 노드 - 트리의 시작 노드
    
    - 형제 노드 - 같은 부모 노드의 자식 노드들
    - 조상 노드 - 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들
    - 서브 트리 - 부모 노드와 연결된 간선을 끊었을 때 생성되는 트리
    - 자손 노드 - 서브 트리에 있는 하위 레벨의 노드들
    
    - 노드의 차수 - 노드에 연결된 자식 노드의 수
    - 트리의 차수 - 트리에 있는 노드의 차수 중에서 가장 큰 값
    - 단말 노드(리프노드) - 차수가 0인 노드, 자식 노드가 없는 노드
    
    - 노드의 높이 - 루트에서 노드에 이르는 간선의 수(노드의 레벨)
    - 트리의 높이 - 트리에 있는 노드의 높이 중에서 가장 큰 값(최대 레벨)
    
- 이진트리
    
    : 모든 노드들이 2개의 서브트리를 갖는 특별한 형태의 트리
    
    - 각 노드가 자식 노드를 최대한 2개까지만 가질 수 있는 트리
    - → 레벨 l에서의 이진트리가 가질수있는 노드의 최소개수는 (h+1), 최대개수는  (2^(h+1)-1)개
    
    포화 이진트리
    
    - 모든 레벨에 노드가 포화상태로 차있는 이진트리
    - 루트를 1번으로 하여 2^(h+1)-1)의 노드를 가진 이진트리
    
    완전 이진트리
    
    - 높이가 h이고 노드수가 n개일 때, 포화이진트리의 노드번호 1번부터 n번까지 빈 자리가 없는 이진트리
    
    편향 이진트리
    
    - 높이가 h에 대한 최소 개수의 노드를 가지면서 한쪽 방향의 자식 노드만을 가진 이진트리
    
- 순회
    
    : 트리의 각 노드를 중복되지 않게 전부 방문하는 것
    
    (트리는 비 선형 구조이기 때문에 선형구조에서와 같이 선후 연결 관계를 알수없음)
    
    3가지의 기본적인 순회 방법
    
    - 전위 순회(VLR) : 부모 노드 방문 후 자식 노드를 좌우 순서로 방문함
    - 중위 순회(LVR) : 왼쪽 자식 노드, 부모 노드, 오른쪽 자식 노드 순으로
    - 후위 순회(LRV) : 자식 노드를 좌우 순서로 방문한 후 부모 노드로 방문
    
    ```python
    def preorder_traverse():    # 전위순회
        if T:                   # T is not None
            visit(T)            # print(T.item)
            preorder_traverse(T.left)
            preorder_traverse(T.right)
    ```
    
    ```python
    def inorder_traverse():     # 중위순회
        if T:                   # T is not None
            inorder_traverse(T.left)
            visit(T)            # print(T.item)
            inorder_traverse(T.right)
    ```
    
    ```python
    def postorder_traverse():   # 후위순회
        if T:                   # T is not None
            postorder_traverse(T.left)
            postorder_traverse(T.right)
            visit(T)            # print(T.item)
    ```
    
- 이진트리 표현 1
    
    배열을 이용한 이진트리 표현
    
    루트의 번호를 1부터로 하고, 레벨 n에 있는 노드에 대하여 왼→오른쪽으로 2^n부터 (2^n+1)-1까지 부여
    
    → 포화 이진트리, 완전 이진트리에 적합
    
    ![image.png](attachment:7e3536c3-5b15-462c-8548-448ef9c8b3de:image.png)
    
    ![image.png](attachment:ec3f40d5-c88f-460b-90cb-5366e1994e23:image.png)
    
    - 노드 번호가 i인 노드의 왼쪽 자식 노드 번호는 ⇒ 2*i
    - 노드 번호가 i인 노드의 오른쪽 자식 노드 번호는 ⇒ 2*i +1
    
- 이진트리 표현 2
    - 부모 번호를 인덱스로 자식 번호를 저장(1부터)
        
        → 인접 인덱스처럼 만들기
        
    - 자식 번호를 인덱스로 부모 번호를 저장
        
        → 루트를 찾을 때 유용함
        
        ex) 5번 노드의 루트를 찾기 ( 루트는 항상 1이 아님! )
        
        ```python
        c = 5
        while( a[c] != 0 )  # 루트인지 확인
        		c = a[c]
        		ans.append(c)  # 조상 목록
        root = c
        ```
        
    
    배열을 이용한 이진 트리의 단점
    
    - 미사용 배열 원소에 대한 메모리 공간 낭비
    - 트리 중간에 새로운 노드를 넣거나 기존의 노드를 삭제할 경우 배열의 크기 변경 어려워 비효율적
    
    그 외에도 완전이진트리의 연결리스트표현, 수식을 표현하는 이진트리 등이 있음