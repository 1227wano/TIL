- 시작하기
    1. 문제를 해결할 때 항상 정해진 절차를 따릅니다
    2. 사람들은 나를 빠르게 만들기 위해 복잡도를 분석해서 가능한 적은 시간 안에 계산이 끝나도록 알고리즘을 설계해줍니다
    
    - SW 문제해결 역량
        - 많은 제약 조건과 요구 사항을 이해하고 최선의 방법을 찾아내는 능력
        - 왜 공부? → 효율적인 프로그램을 만들기 위해
        - 언어, 라이브러리, 자료구조, 알고리즘 등에 대한 지식을 연결하여 큰 그림을 만드는 능력
    
    - 문제해결 과정
        1. 문제 이해
        2. 익숙한 용어로 재정의
        3. 해결 계획 설계    (자료구조, 알고리즘 선택)
        4. 계획 검증    (시간, 공간 복잡도 ← 1초당 3천만번으로 계산) 
        5. 프로그램 구현
        6. 고찰 및 개선 방안 탐구    (파일 입출력으로 히든테케 잡기)
    
    - 복잡도 분석(필수!)
        - 시간적 효율성은 주로 입력크기 n에 대한 연산 횟수로 나타냄
        - 복잡도의 접근적 표기
            - 함수는 주로 여러 개의 항을 가지는 다항식
            - 이를 단순한 함수를 표현하기 위해 점근적 표기를 사용
            - 입력 크기 n이 무한대로 커질 때의 복잡도를 간단히 표현하기 위한 표기법
                - 빅오 표기  → 최악의 경우에도 잘돌아가~ 라는 뜻
                - 빅오메가 표기 → 최선
                - 빅세타 표기 → 평균
        
        - 빅오 표기
            - 복잡도의 점근적 상한을 나타냄
            - f(n) = 2n^2 - 7n + 4 라면, f(n)의 빅오표기는 O(n^2)
            
            ![image.png](attachment:e3fc58ba-7f73-4120-9fe6-0247fdac231a:image.png)
            
            - 같은 코드가 PC 성능에 따라 걸리는 시간이 다르기 때문에 실제 걸리는 시간으로 알고리즘 성능을 체크하는건 의미가 X
            - 코테에서는 연산 횟수에 따른 대략적인 시간을 약속
            
            - append() → 최대한 가능하다면 사용을 피하는 것이 좋다. (메모리 두배로 늘려서 추가함)
                
                → 미리 리스트를 사용할 만큼 생성 (append())로 인한 생성은 피함)
                
    - 표준 입출력 방법
        - 콘솔 입력 대신, 파일 입력으로 입력받기
            
            → 파일에 히든 테케를 입력해서 테스트해봐야 함
            
        
        ```python
        import sys
        
        sys.stdin = open("input.txt", "r")
        sys.stdout = open("output.txt", "w")
        
        a, b = map(int, input().split())
        print(a, b, a+b)
        ```
        
    
- 진법과 연산
    
    16진수
    
     : 2진수를 사람이 이해하기 편하도록 16진수로 변환 시, 인간이 이해하기 어렵지만 연산속도 매우 빠름
    
    ![image.png](attachment:1d37a7bb-39da-4a03-a01c-fde9a052d226:image.png)
    
    - 10진수 → 2진수 변환법
    
    ![image.png](attachment:9adac3c8-90b4-448c-9952-ad4ba124be7f:image.png)