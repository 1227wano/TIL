- 논리(hard logic)
    
    : 생각이나 주장의 타당성과 옳고 그름을 판별하는 규칙이나 원리를 의미함
    
      경험적, 직관적, 확률적 판단을 의미하는 soft logic에 반대되는 의미
    
       맞는 이유와 틀린 이유를 정확히 밝히는 생각의 규칙
    
    - 명제
        
        참이나 거짓을 알수있는 식이나 문장  → 진릿값
        
        ex) 유재석은 차은우보다 잘생겼다 → 객관적 지표가 없기때문에 명제가 아님
        
        - 부정(NOT) : p가 명제일때, 명제의 진릿값이 반대
        - 논리곱(AND) : p, q 가 명제일 때, p, q 모두 참일 때만 참이 되는 명제
        - 논리합(OR) : p. q가 명제일때, p ,q 모두 거짓일 때만 거짓이 되는 명제
        - 배타적 논리합(XOR) : p, q 가 명제일 때, p, q 중 하나만 참일 때 참이 되는 명제
        - 조건 명제 : p, q 가 명제일 때 명제 p 가 조건, q가 결론으로 제시되는 명제
        - 쌍방조건명제 : p, q가 명제일 때, 명제 p와 q가 모두 조건이면서 결론인 명제
        
        ![image.png](attachment:18a3348e-e174-440c-9590-31458ee18a16:image.png)
        
        문제 1 : 다음을 명제식 형태로 쓰고 참인지 거짓인지 판단하시오
        
        - 만약 0이 홀수라면, 미국에서 2080년 월드컵이 열린다.
            - p : 0은 홀수이다 (거짓)
            - q : 미국에서 2080년 월드컵이 열린다 (알수없음)
            - 명제식 : p→q, p 명제가 거짓이므로, q명제가 참/여부에 상관없이 해당 명제식은 참
    
    수학적 귀납법과 증명의 수준
    
    - 다음 함수가 1부터 x까지의 합을 계산함을 증명한다면
        
        ```python
        def sum(x):
        		if (x ≤ 0):
        			return 0
        		return x + sum(x-1)
        ```
        
    
    - (경우를 나누어 증명) 자연수 n에 대해 n^2+5n+3 은 항상 홀수임을 증명
        
        ![image.png](attachment:a4de42da-e18f-464a-89be-a5bb54c31940:image.png)
        
    
    - 문제 12 (과제) : n^2이 3의 배수이면 n은 3의 배수임을 증명하라
        
        
- 수와 표현
    - log n 이란 : 2의 몇 승이 n이 되는가의 답
    - n을 표현하는 데 몇 비트가 필요한다의 답
    - 1로 시작해거 계속 두 배를 할 때 몇 번 하면 n이 되는가의 답
    - n을 2로 계속 나눌 때 몇 번 나누면 거의 1이 되는가에 대한 답

- 집합과 조합론
    - 조합론의 경우는 수를 따지는 문제들을 말함
    - 조합의 개수는 C를 이용하여 5C2처럼 표현
    
    - 귀류법 - 간접증명의 한 방식
        
        : 한 명제가 참인 것을 증명하려고 할 때에, 그 명제의 부정을 참이라고 가정하여 거기에서 나타나는 불합리성을 증명함으로써 원래의 명제가 참인 것을 보여주는 증명법
        

- 기초 수식
    - 알고리즘의 시간 복잡도를 표현할 수 있는 다양한 수식들이 존재함
    - 풀이법을 익혀 두어야 알고리즘의 시간복잡도를 계산할 수 있고, 알고리즘이 시간이 얼마나 걸릴 지 예측가능
    - 재귀식을 O() notation 수준으로 풀어보는 연습이 필요
    - 내 알고리즘이 좋습니다 라는걸 어필
        1. 속도 
            1. 최선 
            2. 평균 
            3. 최악(항상 잘 돌아가는 프로그램을 구현해야 하기 때문에 가장 중요)
            
            → 최악의 시간복잡도를 표기하자( O(n) ) 
            
        2. 메모리
    - 문제4 (과제) : T(n)=T(n/2)+1, T(1)=1
    - 
- 재귀
    - 함수란 어떤 문제를 해결하는 방법을 코딩한 것
    - 어떤 문제의 단 한 케이스만을 해결하는 것이 아님
    - 제대로 코딩된 것이라면 해결하는 문제의 모든 케이스들을 해결해야힘
    - 수학적 귀납법 증명사용 가능
    
- 동적 계산법
    - 재귀 함수에서 동일한 입력의 함수 호출이 반복적으로 일어날 때 그 결과 값을 저장해 두고 불러 쓰는 것임 (Memoization)
    - 최소 입력에서 파생되는 모든 가능한 입력에 대한답을 모두 저장할 수  있는 메모리가 있어야함
    - 단순히 재귀에서 저장된 값을 찾아보는 것으로도 가능하지만, 결과 값을 순서를 정해서 계산 가능
    - 동적 계획법 알고리즘을 슈도코드로 작성하고, 정확성 증명 및 시간 복잡도를 계산하는 연습 필
    
    [ 문제 12 ] n^2이 3의 배수이면 n은 3의 배수임을 증명하라.
    n^2 = 3k -> n = 3m
    n 이 3의 배수가 아닐때,  n = 1, 2, 4, 5, 7, 8 이면
    n^2 는 1, 4, 16, 25, 49, 64 이 되므로, 3의 배수가 아니게 된다.
    고로 참이다.
    
    [ 문제 4 ] T(n)=T(n/2)+1, T(1)=1
    T(n/2) = T((n/2)/2)+1
    = T(n/4)+1
    T(n) = T(n/4)+1+1
    = T(n/2^k)+k
    = T(1)+k	-> n/2^k = 1 -> n=2^k -> k =log2n
    T(n) = 1 + log2n