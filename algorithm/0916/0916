0916 그래프 2

- 최소 비용 신장 트리
    - MST(Minimum Spanning Tree)
    
    : 무방향 가중치 그래프에서 신장 트리를 구성하는 간선들의 가중치 합이 최소인 신장 트리
    
    정점-1개의 간선으로 모든 정점을 방문하는 경로
    
    → 인접 행렬로 표현시, 0과 1이 아닌 각 가중치로 표현하는 것
    
    → 인접 리스트는 연결 노드가 아닌 튜플 형태로 (연결 노드, 가중치) 일케 저장
    
    - MST 찾기
        - Prim
            
            : 하나의 정점에서 연결된 간선들 중 작은 가중치들만 골라가는 방법(BFS처럼 접근)
            
            → queue가 아닌 우선순위큐를 사용하여 heapq로 구현
            
            1. 임의 정점을 하나 선택
            2. 선택 정점의 인접 정점들 중 최소 비용의 간선이 존재하는 정점을 선택
            3. 모든 정점이 선택될때까지 반복
            
        - Kruskal
            
            : 간선을 하나씩 선택해서 작은 가중치부터 고르는 방법
            
            1. 최초, 모든 간선을 가중치에 따라 오름차순으로 정렬
                
                (사이클 발생 시  Union_find를 활용해서 선택 x)
                
            2. 가중치가 가장 낮은 간선부터 선택하면서 트리를 증가시킴
            3. n-1개의 간선이 선택될 때 까지 2를 반복
        
- 최단 경로 : Dijkstra
    
    : 간선의 가중치가 있는 그래프에서 두 정점 사이의 경로들 중에 간선의 가중치의 합이 최소인 경로
    
    ⇒ 누적비용이 적은 곳으로만 가자
    
    - 최단 경로의 종류
        1. 하나의 시작 정점에서 끝 정점까지의 최단 경로
            - 다익스트라 : 음의 가중치를 허용하지 않음
            - 벨만-포드 : 음의 가중치 허용
        2. 모든 정점들에 대한 최단 경로
            - 플로이드 워샬
    
    - 다익스트라
        
        : 시작 정점에서 거리가 최소인 정점을 선택해 나가면사(그리디) 최단 경로를 구하는 방식
        
        - 시작 정점에서 끝 정점까지의 최단 경로에 정점 x가 존재
        - 이때, 최단 경로는 s에서 x까지의 최단 경로와 x에서 t까지의 최단 경로로 구성됨
        - 탐욕 기법을 사용한 알고리즘으로 MST의 Prim 알고리즘과 유사함
        1. 누적 거리 리스트를 저장
        2. 우선순위 큐를 활용해서 누적거리가 짧은 경로를 먼저 꺼냄
        3. 이때, 누적거리는 처음에 inf로 설정하고 최소를 수정해나
        
        ![image.png](attachment:00a59a71-22f3-4e28-8ed4-3dc48e04da5a:image.png)
        
        ![image.png](attachment:73d04c25-0eec-4574-ac7b-75d4ae1f9f43:image.png)
        
- 정리
    1. MST가 무엇인지 이해
    2. 알고리즘 
        
        - 정점을 기준으로 갈 수 있는 것 중 가장 적은 곳으로 먼저 가자 - prim
        
        - 간선을 기준으로 가중치가 적은 간선부터 선택 - kruskal
        
    3. 뭘 써야 하느냐~ 
        
        간선이 많을 수록 완전 그래프 → prim 이 유리
        
    4. 최단 거리 개념을 이해
    5. 다익스트라 알고리즘 활용법을 익힌다