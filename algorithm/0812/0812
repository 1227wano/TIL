- Stack 자료구조
: 대표적인 선형 자료구조
    - 후입선출(LIFO)
    
    기본 연산
    
    - 배열을 사용해 구현가능 ( 파이썬에서는 리스트를 사용)
    - 용도에 따라 메모리의 일부를 스택으로 부름
    - 마지막 삽입된 위치 = 스택 포인터(sp), top으로 부름
    - 삽입(push) : push() 아님
    - 삭제(pop) : 파이썬 자체에도 pop()함수가 있어서 사용 시에는 함수 등으로 만들어서 구분해야 함
    - 공백확인(isEmpty) : 비어있으면 True 아니면 False
    - top에 있는 원소 반환(peek) : 삭제 아님
    
    Push 연산
    
    ```python
    # append 메소드로 리스트 마지막에 데이터 삽입
    def my_push(item):
    		s.append(item)
    
    # 인덱스 연산을 활용한 구현
    def my_push(item, size):
    		global top
    		top += 1
    		if top == size:        # 디버깅 용도
    				print('overflow')
    		else:
    				stack[top] = item
    
    # 단순한 Push 연산
    size = 10
    stack = [0] * size
    top = -1              # 스택에 추가되면 0부터 이므로 초기값은 -1
    
    push(10, size)
    top += 1        # push(20)
    stack[top] = 20
    ```
    
    Pop 연산
    
    ```python
    def my_pop():
    		if len(s) == 0:
    				# underflow (스택 비었음) 출력
    				return
    		else:
    				return s.pop()  # 리스트 s의 마지막 원소 삭제후 반환
    				
    # 인덱스 연산을 이용한 pop연산
    def my_pop():
    		global top
    		if top == -1:
    				print('underflow')
    				return 0
    		else:
    				top -= -1
    				return stack[top+1]  # top을 하나 줄였으니, 삭제한 값을 꺼내기 위해 +1
    print(pop())
    
    # 간단버전?
    if top > -1:
    		top -= 1
    		print(stack[top+1])	
    ```
    
    스택 구현 고려 사항
    
    - 1차원 배열을 사용하여 구현
        - 장점 : 구현이 용이
        - 단점 : 스택의 크기 변경 어려움
    - 해결 방법 : 저장소를 동적으로 할당(동적 연결리스트 이용)
        - 장점 : 메모리를 효율적으로 사용
        - 단점 : 구현이 복잡
    
- Stack 응용
    - 괄호 검사
    : 대, 중, 소괄호 등 제대로 사용되고 닫혔는지 ← 근데 왜 하는지 모르겠음…
        
        조건
        
        1. 좌우 괄호의 개수가 같아야 함
        2. 괄호 사이에는 포함 관계만 존재
    - 스택을 이용한 괄호 검사
    - 개요
        1. 문자열에 있는 괄호를 차례대로 검사하며 왼쪽 괄호 만나면 스택에 삽입, 오른쪽 만나면 스택에서 top괄호를 삭제한 후 오른쪽과 짝이 맞는지 검사
        2. 스택이 비어있거나 짝이 안맞으면 조건 위배
        3. 마지막 괄호 조사 후 스택에 괄호 남아있으면 조건 위배
    
    ```python
    txt = input()
    top = -1
    stack = [0] * 100   # 스택 생성
    ans = 1     # 기록용
    for x in txt:
    		if x == '(':   # 여는 괄호면 push
    				top += 1
    				stack[top] = x
    		elif x == ')':   # 스택에서 꺼내서 확인
    				if top == -1:   # 오류. 여는 괄호 부족
    						ans = 0
    						break
    		else:
    				top -= 1    # pop
    if top != -1:   # 여는 괄호가 남아있으면
    		ans = 0
    
    print(ans)
    ```
    
    - Function Call ( 이거 스택 안쓰면 관리 안됨..?)
    : 프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리(하는데에 스택이 사용됨)
        
        → 가장 마지막에 호출된 함수가 가장 먼저 실행을 완료하고 복귀하는 후입선출 구조이므로, 
        후입선출 구조의 스택을 이용하여 수행순서 관리
        
    - 시스템 스택
        - 함수 수행에 필요한 지역 변수, 매개변수 및 수행 후 복귀할 주소 등의 정보를 저장
        - 함수 호출이 발생하면 스택 프레임에 저장하여 시스템 스택에 삽입
        1. top 이 현재 실행중인 함수
        2. 함수 실행 끝나면 시스템 스택의 top원소(스택 프레임)를 삭제(pop)하면서 프레임에 저장돼있던 복귀주소를 확인하고 복귀시킴
        3. 함수 호출과 복귀에 따라 전체 프로그램 수행이 종료되면 시스템 스택은 공백 스택이 됨