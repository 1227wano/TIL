- 카운팅정렬
: 항목들의 순서를 결정하기 위해 집합에 각 항목이 몇개씩 있는지 세는 작업을 하여, 선형 시간에 정렬하는 효율적인 방식
    - 정수나 정수로 표현하는 자료에 대해서만 적용 가능
    - 카운트들을 위한 충분한 공간을 할당하려면 집합 내의 가장 큰 정수를 알아야함
    1. DATA에서 각 항목들의 발생횟수를 세고, 정수 항목들로 인덱스되는 카운트배열에 저장
    2. 정렬된 집합에서 각 항목 앞에 위치할 항목의 개수를 반영하기 위해 COUNTS의 원소 조정
    3. DATA의 마지막 원소 1의 발생횟수 COUNTS[1]를 감소시키고 TEMP에 1을 삽입
    4. COUNTS[4]를 감소시키고 TEMP에 4를 삽입 …. 등등 반복
    
    ![image.png](attachment:9855cffd-f415-4998-ac1d-957b31fb4244:image.png)
    
    ![image.png](attachment:2ca5533c-3884-46f4-b5c9-7a08433eea0a:image.png)
    
- 완전검색
: 문제의 해법으로 생각할 수 있는 모든 경우의 수를 나열해보고 확인하는 기법
    - Brute-force 혹은 generate-and-test 기법이라고도 함
    - 일반적으로 경우의 수가 상대적으로 작을 때 유용함
    - 수행속도는 느리지만 해답을 찾지 못할 확률이 낮음
    - 완탐으로 접근하여 해답 도출 후, 성능개선을 위해 다른 알고리즘을 사용하고 해답을 찾는 것이 바람직함
    
    순열(nPr)
    : 서로 다른 n개들 중 r개를 뽑아서 한 줄로 나열하는 것
    
    nPr = n * (n-1) * (n-2) * …. * (n-r+1)
    
    nPr = n! 이라고 표기하며 Factorial이라 부릅니다.
    n! = n * (n-1) * (n-2) * … 2 * 1
    
    ```python
    import itertools
    
    arr = [2,3,5,7,7,7]
    nPr = list(itertools.permutations(arr, 6))
    for x in nPr:
    		print(x)
    print(len(nPr))
    ```
    
- 그리디
: 여러 경우 중 하나를 결정해야 할 때마다 그 순간에 최적이라고 생각되는 것을 선택해나가는 방식으로 진행하여 최종적인 해답에 도달하는 방식
    - 최적해를 구하는데 근시안적인 방법
    - 지역적으로는 최적이나, 그 선택들을 계속 수집하여 최종적인 해당을 만들었다고 하여 그것이 최적이라는 보장은 없음
    - 머릿속에 떠오르는 생각을 검증없이 바로 구현하면 그리디 접근임
    
    과정
    
    1. 해 선택 : 현재 상태에서 부분 문제의 최적해를 구한 뒤 부분 해 집합에 추가
    2. 실행 가능성 검사 : 집합이 실행 가능한지, 문제의 제약조건을 위반하지 않는지 확인
    3. 해 검사 : 새로운 부분 해 집합이 문제의 해가 되는지 확인, 전체 문제의 해가 완성되지 않았다면 해 선택부터 다시 시작
    
    탐욕 알고리즘을 활용한 Baby-gin 접근
    
    ```python
    num = 456789 # 확인할 6자리수
    c = [0] * 12 # 5자리 수로부터 각 자리 수를 추출하여 개수를 누적할 테스트
    
    for i in rane(6):
    		c[num % 10] += 1    # num%10 : num의 1의 자리
    		num //= 10          
    ```
    
    ```python
    i = 0
    tri = run = 0
    while i < 10:
        if c[i] >= 3:  # triplet 조사 후 데이터 삭제
            c[i] -= 3
            tri += 1
            continue
        if c[i] >= 1 and c[i+1] >= 1 and c[i+2] >= 1:  # run 조사 후 데이터 삭제
            c[i] -= 1
            c[i+1] -= 1
            c[i+2] -= 1
            run += 1
            continue
        i += 1
    
    if run + tri == 2:
        print("Baby Gin")
    else:
        print("Lose")
    ```
    
    Baby-gin 문제에서 자주 실수하는 오답
    : 입력받은 숫자를 정렬한 후, 앞뒤 3자리 씩 끊어서 run 및 triplet을 확인하는 방법 고려 가능
    
    예) [1,2,3,1,2,3]
    정렬하면 [1,1,2,2,3,3] 로서, 오히려 baby-gin 확인을 실패할 수 있음