# Gradio 라이브러리를 사용해 챗봇 UI(사용자 인터페이스)를 만드는 방법

[12_Gradio.ipynb](attachment:65a121a8-69ec-43fa-9f15-bde8ffd755a4:12_Gradio.ipynb)

[Gradio실습.zip](attachment:50f0e03b-8647-4011-96d6-5fb977cba136:Gradio실습.zip)

### (1) 사전 준비

- **블록 1 (텍스트):** 제목과 함께 이 노트북을 실행하기 위한 매우 중요한 **주의사항**을 안내합니다. 이 노트북은 이전 실습 파일(`11_Agent.ipynb`)에서 만들어진 챗봇 에이전트(`agent_with_memory`)와 설정값(`config`)이 메모리에 이미 로드되어 있는 상태에서 실행해야 한다고 명시합니다.
- **블록 2 (코드):** 챗봇 UI를 만드는 데 필요한 **파이썬 라이브러리들을 설치**합니다. `langchain`, `langchain-community`, `langchain-upstage` 등 LangChain 관련 라이브러리와 UI 툴킷인 `gradio` 라이브러리를 설치하는 작업을 수행합니다.
- **블록 3 (코드):** 설치한 `gradio` 라이브러리를 파이썬 코드로 가져옵니다(import).

### (2) Gradio 실행

- **블록 4 (코드):** Gradio가 챗봇 에이전트와 통신할 수 있도록 연결하는 **핵심 함수를 정의**합니다.
    - `chat_interface`라는 이름의 함수를 만듭니다.
    - 이 함수는 사용자의 '메시지(message)'와 '대화 기록(history)'을 입력받습니다.
    - 함수 내부에서는 이전 노트북에서 만든 `agent_with_memory`를 호출하여 사용자의 메시지를 전달하고, 에이전트의 답변('output')을 받아옵니다.
    - 마지막으로 에이전트가 생성한 답변을 반환합니다.
    - 이 블록은 'Gradio UI'와 'LangChain 에이전트' 사이의 다리 역할을 합니다.
- **블록 5 (코드):** **Gradio 챗봇 UI를 실제로 실행**시키는 블록입니다.
    - Gradio의 `ChatInterface` 기능을 사용합니다.
    - 사용자가 메시지를 입력할 때마다 바로 위(블록 4)에서 만든 `chat_interface` 함수를 호출하도록 설정합니다.
    - 채팅창의 제목을 "Upstage Agent Chatbot"으로 설정합니다.
    - `share=True` 옵션을 통해, 이 코드를 실행하는 컴퓨터(Colab)뿐만 아니라 외부에서도 접속할 수 있는 **공용 인터넷 주소(URL)를 생성**하여 챗봇 데모를 실행합니다.

### (3) Gradio 평가

- **블록 6 (텍스트):** "Gradio가 빛을 발하는 순간 (장점)"이라는 제목의 텍스트 블록입니다.
- **블록 7 (텍스트):** Gradio 라이브러리의 **장점**을 정리한 블록입니다.
    - 몇 줄의 코드만으로 빠르게 프로토타입을 만들 수 있음
    - HuggingFace Spaces와 연동하여 배포 및 공유가 쉬움
    - 코드를 모르는 동료에게 시연용(내부용) 툴을 만들어주기 좋음
- **블록 8 (텍스트):** "Gradio가 잘 쓰이지 않는 이유 (한계)"라는 제목의 텍스트 블록입니다.
- **블록 9 (텍스트):** Gradio 라이브러리의 **한계점(단점)**을 정리한 블록입니다.
    - UI 디자인을 세밀하게 변경(커스터마이징)하기 어려움
    - 많은 사용자가 동시 접속하는 상용 서비스의 복잡한 상태를 관리하기 어려움
    - 대규모 트래픽을 처리하는 용도로 설계되지 않음
- **블록 10 (텍스트):** **결론**을 내리는 텍스트 블록입니다. Gradio는 실제 상용 제품(Production)을 만드는 도구가 아니라, 빠른 **데모(Demo)나 PoC(Proof of Concept, 개념 증명)용 툴**을 만드는 데 특화된 도구라고 요약합니다.