
환경설정
python은 shell 이라는 프로그램으로 인터프리터 환경을 실행하고 동작함
1. $ python -i 를 터미널에 입력
2. cd 로 폴더로 이동, $ ls 한후, 파일 입력

표현식(Value)
10+2 같은 식도 값

변수와 메모리
변수(Valuable) : 값을 나중에 사용하기 위해 붙이는 고유명
변수 할당(valuable assignment) : 표현식이 만들어낸 값에 이름 붙이는 과정
할당문(assignment statement) : “degrees = 36.5” → 값 36.5을 변수 degrees에 할당(흐름은 우→좌)
degrees 는 변수명, = 는 할당연산자, 36.5 는 표현식
변수명은 영문 알파벳, _, 숫자로 구성(숫자로 시작불가) 

메모리 : 모든 위치에는 그 위치를 고유하게 식별하는 메모리 주소가 존재(
객체 : 타입, 고유주소, 값(내용물)
변수는 특정 객체를 가리키는(refer to / point to) 이름표 (변수는 메모리 주소를 가지지 않음)
재할당 : number는 5로 재할당되어도, double은 이미 20으로 할당되어있어서 변하지 않는다.

Data type
: ‘값’과 ‘값에 적용할 수 있는 연산’ 의 두 가지로 구분
: 숫자, 소수, 문자열, 어떤 식.. 등
: 값의 종류와 그 값으로 할수있는 동작 (숫자와 문자는 더하면 오류)

정수형 (int)
실수자료형 (float) 
지수 표현법 : 아주 크거나 작은 실수를 간결하게 표현 e / E 를 사용 
(지수 : 어떤수를 여러번 곱할때 곱하는 횟수를 나타내는수)
ex) 1,230,000,000 = 1.23*10^9 = 1.23e9

산술 연산자 
연산자 우선순위
ex) -2 ** 4 는 **가 -보다 우선순위가 높으므로, 2 ** 4 =16 한 후에 -해서 -16이 됨

Sequence Types : 여러 개의 값들을 순서대로 나열하여 저장하는 자료형
대표 시퀀스 : str, list, tuple, range
인덱스 : 시퀀스 자료형에서 각 값의 위치를 식별하기 위해 부여된 고유번호(0부터 시작)
특징 : 
1. 순서(Order) : 순서대로 저장(정렬x)
2. 인덱싱(Indexing) : 고유한 위치를 가짐
3. 슬라이싱 : 인덱스 범위를 조절해 원하는 부분만 잘라서 사용 가능
4. 길이 : 함수를 사용하여 저장된 값의 개수를 구할수있음
5. 반복(Iteration) : 반복문을 사용하여 각 값을 하나씩 순서대로 꺼내 사용 가능

\n은 개행
여러줄 문자열을 작성할때는 ‘ ‘ ‘ 또는 “ “ “ 를 사용
문자열에 값 삽입하기 f-string : 문자열 내에 변수나 표현식의 결과를 손쉽게 삽입하는 강력한 방법
⇒ 문자열 시작전 ‘f’ 접두어를 붙이고 삽입할 부분을 중괄호{}로 감쌈
시퀀스로서의 문자열

파이썬은 음수 인덱스를 지원 : 시퀀스의 끝에서부터 값에 접근 가능
-1 은 마지막 값을 의미. -2는 마지막에서 두번째값 → 후반부 요소를 확인할때 용이

슬라이싱 : []안에 시작위치, 끝위치, 간격을 : 로 구분하여 지정
ex) my_sequence[start:stop:step]
start : 시작 인덱스(포함), stop : 슬라이싱을 끝낼 인덱스 (포함안됨), step : 몇개씩 건너뛰며 값을 가져올
ex) my_str = ‘hello’ 일때 
my_str[2:4] 는 ‘ll’ 
my_str[:3] 는 start가 생략되어 0부터 시작해서 ‘hel’
my_str[3:] 는 stop이 생략되어 끝까지 포함이니 ‘lo’
my_str[::2] 는 처음부터 끝까지 2개씩 띄어서니까 ‘hlo’
my_str[::-1] 는 끝 인덱스부터 역순으로 처음까지 ‘olleh’
문자열의 불변성 : 할당된 문자열은 재할당 불가. 다른 변수를 생성하여 재할당하라.

정수형의 진법 표현 : 접두사(prefix)를 제공
실수의 함정 부동소수점 오차
원인 1. 컴퓨터는 2진법
해결법
1. 무한소수의 발생과 근사값 저장
2. 10진수중 일부는 2진수로 바꾸면 무한소수가 됨
3. 메모리는 유한하기 때문에 컴퓨터는 이 무한소수를 근사값으로 잘라서 저장함
해결책 : decimal 모듈을 사용해 부동소수점 연산의 정확성을 보장. 이는 실수를 2진수로 변환하지 않고 10진수 자체로 정확하게 연산할수 있게 해줌. 암튼 소수를 계산할때조심

문장
할당문, 조건문, 반복문
표현식 vs 문장 → 하나의 값으로 귀결되면 표현식, 문장은 지시하고 끝
Style Guide : 코드의 일관성과 가독성을 향상시키기 위한 규칙과 권장 사항 모음 (예: PEP8)