- **list**
  : 여러 개의 값을 순서대로 저장하는 변경 가능한 시퀀스 자료형
    []안에 ,로 구분하고 모든 종류의 데이터 담기가능
    값의 추가수정삭제 자유롭게 가능
    시퀀스이므로, 문자열처럼 인덱싱, 슬라이싱, 길이확인, 반복 등 공통기능 다 사용 가능
    
  중첩 리스트 : 다른 리스트를 값으로 가진 리스트
    내부리스트 접근법 
    ex) my_list_3 = [1, 2, 3, 'python', ['hello', 'world', '!!!']] → my_list[4][1] = ‘world’
    그리고 문자열도 시퀀스니까, my_list[4][1][1] = ‘o’
    
  리스트의 가변성
    - 인덱싱으로 특정 인덱스 지정해서 수정 가능
    my_list[2] = ‘four’ → my_list_3 = [1, four, 3, 'python', ['hello', 'world', '!!!']]
    - 슬라이싱으로 여러값 한번에 변경 가능
    my_list[2:4] = [’three’, ‘four’] → my_list_3 = [1, 2, ‘three', ‘four’, ['hello', 'world', '!!!']]

- **tuple**
  : 여러 개의 값을 순서대로 저장하는 변경불가한 시퀀스 자료형
    
    ()안에 ,로 구분하고 모든 데이터 담기 가능
    소괄호 없이도 만들기가능, 단일요소 만들때는 반드시 후행쉼표 사용해야함
    시퀀스이므로, 문자열처럼 인덱싱, 슬라이싱, 길이확인, 반복 등 공통기능 다 사용 가능
    
  튜플의 불변성 : 한번 생성되면 수정추가삭제 불가 (변경하면 TypeError)
    but 개발자는 잘 안씀, python자체가 내부적으로 사용함
    다중할당, 값교환, 함수다중반환값 등 할때 언패킹 등 하면서 사용한다고함
    ⇒ 튜플은 데이터의 ‘안정성과 무결성’을 보장
    
- **range**
  : 연속된 정수 시퀀스를 생성하는, 변경불가한 자료형
    주로 반복문과 사용, 특정횟수만큼 반복실행할때 유용
    
  기본 구문 
    range()는 1개, 2개, 또는 3개의 매개변수(인자)를 가짐
    range(start, stop, step)
    
  range의 규칙
    1. 값의 범위 규칙
    stop 값은 생성되는 시퀀스에 포함되지않음
    2. 증가/감소 값(step) 규칙
    step이 양수일때(기본값 1) → 숫자가 start부터 stop을 향해 증가
    range(1,10,2) ⇒ 1,3,5,7,9
    step이 음수일때 → start값은 stop보다 커야함
    range(10,1,-2) ⇒ 10,8,6,4,2
    
- **dict**(딕셔너리)
  : key-value 쌍으로 이루어진 순서와 중복이 없는 변경가능한 자료형
    
    순서없음→인덱스없음→키로접근
    {}안에 ,로 구분. 
    key는 중복불가, 각 값에는 순서가 없음(python3.7부터 출력은 입력순서를 보장)
    
  규칙
    - key는 고유해야함
    - 변경 불가능한 자료형만 사용가능
    
  접근방법
    key를 사용하여 해당 value에 접근
    접근시 [] 이용
    
    값 추가 및 변경
    추가
    my_dict['name'] = 50 → key(name)과 value(50)이 추가됨
    변경
    my_dict['name'] = 100 → key가 name인 value가 100으로 변경됨
    
- **set**(세트) (→ 튜플이랑 비슷하게 잘 안씀)
  : 순서와 중복이 없는 변경 가능한 자료형
    
    {} 안에 ,로 구분하여 만든다 but, 빈 set를 만들때는 set() 라고 작성
    수학에서의 집합과 동일한 연산 처리 가능
    
    중복 허용 안함, 순서 없음
    합집합 → | 
    차집합 → - 
    교집합 → & 
    를 사용해서 나타냄 
    
- **Other Types**
  - None : 값이 없음을 나타냄(데이터가 아직 없음을 뜻함, 빈상자) → 첫글자대문자!
  - Boolean : 참과 거짓. 주로 조건/반복문과 사용 → True, False 첫글자대문자!
    
- **Collection**
  : 보관함. str, list, tuple, range, set, dict 데이터 타입 모두 Collection
    
  불변과 가변
   : 컬렉션 타입은 생성후 내용변경 가능인지 불가인지
    
- **형변환**
  : 한 데이터타입을 다른 데이터타입으로 변환
  
    1. 암시적 형변환: 파이썬이 자동으로 처리
      파이썬이 데이터 손실을 막기 위해 더 정밀한 타입으로 자동변환
        ex) 정수 + 실수 = 실수 ← 더 담을수있으니까
        ex) 불리언 + 정수 = 정수 ← True = 1 , False = 0 ⇒ 불리언끼리도 가능
        
    2. 명시적 형변환: 개발자가 직접 함수로 지정해서 변환
      - str → int : 형식에 맞는 숫자만 가능
      - int → str : 모두 가능
      - 컬렉션간의 형변환 정리
        
- **연산자**
  : 산술연산자, 복합연산자, 비교연산자, 논리연산자
    
  복합연산자
    : 연산과 할당이 함께 이뤄짐
    
  비교연산자
    : 두 값을 비교하여 그 관계가 맞는지틀린지 T/F로 반환
    
  <== 와 is 의 차이>
    == 는 값이 같은지 → 동등성
    is는 객체 자체가 같은지 → 식별성 ⇒ 완전히 동일한 메모리 주소의 객체인지 확인
    ⇒ is는 정체성을, ==는 가치를 비교
    
    is 를 값 비교에 사용하면 의도와 다른 결과가 날수도 있으므로, 주로 싱글턴객체(None, True, False)를 비교할때 사용
    ⇒ 단 하나의 객체만 생성되어 재사용되는 싱글턴 객체 비교에 적합!
    
  논리연산자
    : 여러 개읜 조건을 조합하거나, T/F 값을 반대로 뒤집을때 사용 (and, or, not)
  
  단축 평가 
    : 논리 연산에서 두번째 피연산자를 평가하지 않고 결과를 결정하는 동작. 꼭 필요한 계산만 함.
   단축 평가를 하는 이유 ; 코드 최적화, 불필요한 연산 피함
    - and : 하나라도 거짓이면 거짓
    - or : 하나라도 참이면 바로 참
    
  멤버십 연산자
    : 특정 값이 시퀀스나 다른 컬렉션 안에 포함되어 있는지 확인
    
  시퀀스형 연산자
    : +, * 로 특별한 의미로 사용됨
    +는 시퀀스를 연결하는 기능, *는 시퀀스를 반복하는 기능
    
- **Trailing Comma**
  :  각 요소를 별도의 줄에 작성.
    
    마지막 요소 뒤에 추가. 
    닫는 괄호는 새로운 줄에 배치(한줄 작성시에는 불필요)
    → 딕셔너리에서 많이 사용
    장점 : 가독성 향상, 유지보수 용이성