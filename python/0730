프로그래밍 패러다임

- 절차 지향과 객체 지향
    
    절차 지향 프로그래밍
    : 함수와 로직 중심 작성 데이터를 순차적으로 처리
    
    입력받고, 처리하고, 결과를 내는 과정이 위에서 아래로 순차적으로 흐르는 상태
    
    순차적인 명령어 실행 / 데이터와 함수(절차)의 분리 / 함수 호출의 흐름이 중요
    
    한계: 
    
    1. 복잡성 증가
    2. 유지보수 문제
    
    객체 지향 프로그래밍
    : 클래스는 설계도, 인스턴스는 실제 물건
    
    프로그램을 데이터와 그 데이터를 처리하는 함수를 하나의 단위로 묶어서 조직적으로 관리
    
    데이터와 메서드의 결합
    
    “볶음밥 기계”
    
    절차 지향과 객체 지향은 대조되는 개념  아니다!
    
    객체 지향은 기존 절차 지향을 기반으로 두고 보유하기 위해 객체라는 개념을 도입해
    상속, 코드, 재사용성. 유지보수성 등의 의점을 가지는 타입
    

객체와 클라스

- 객체
: 실제 존재하는 사물을 추상화한 것
    
    속성과 동작을 가짐
    
- 클래스
    
    : 객체를 만들기 위한 설계도
    
    데이터와 기능을 함께 묶은 방벙을 제공
    
    파이썬에서 타입을 표현하는 방법
    
    특징
    
    : 속성 - 객체의 상태 / 데이터
    
    : 메서드, - 객체의 행동/가능
    
    : 고유성 - 각 객체는 고유한 특성을 가짐
    
    클래스 정의
    : class 키워드로 파스칼케이스 방식으로 작성 ex) class MyHome
    
    __init__ 메서드는 ‘생성자’ 메서드
    
    step 1 생성자 메서드로 초기값 설정
    
    클래스 예시
    
    step 2 아래의 인스턴스 정보로 위의 introduce 호출
    
    인스턴스 예시
    
    step 3 introduce의 매개변수인 self에는 생성자메서드에서 self.name에 name을 담고, self.age에 age를 담도록 설정해놓음
    
    → 인스턴스의 (Alice와 25가 self로 들어가면서 각각 name과 age에 할당됨
    
    → print메서드의 f-string내의 name, age에 들어가면서 사진처럼 출력됨
    
    ⇒ 생성자 메서드의 “self”는 이후의 메서드에 필요한 ‘자신’을 추상화한것
    
    ⇒ 클래스에서 인스턴스가 생성된다…?
    
- 인스턴스
: 클래스를 통해 생성된 객체
    
    같은 클래스로 여러 인스턴스를 만들수 있으며, 각 인스턴스는 클래스 구조를 따라 동작하지만 서로 독립된 데이터를 가질 수 있습니다.
    
    클래스와 인스턴스
    
    클래스를 정의한다는 것은 공통된 특성과 기능을 가진 틀을 만드는 것
    
    실제 활동하는 개별 객체들은 이 틀에서 생성된 인스턴스임
    
    공통된 특성과 기능을 가진 틀을 만드는 것은 곧 새로운 타입을 만드는 행위
    
    → 결국 문자열 타입의 변수는 str 클래스로 생성된 인스턴스다
    
    → 하나의 객체는 특정 클래스의 인스턴스이다.
    
    클래스의 구성요소
    
    1. 생성자 메서드
    : 인스턴스 생성 시 자동 호출되는 특별한 메서드, 인스턴스 변수의 초기화 담당
    2. 인스턴스 변수 
    : 각 인스턴스 별 고유한 속성, self.변수명 형태로 정의, 인스턴스마다 독립적인 값 유지
    3. 클래스 변수
    : 모든 인스턴스가 공유하는 속성, 클래스 내부에서 직접 정의
    4. 클래스 변수와 인스턴스 변수
    : 클래스 변수와 동명으로 인스턴스변수 생성시, 클래스변수가 아닌 인스턴스 변수에 먼저 참조하게 됨
    
- 메서드
    
    : 클래스 내부에 정의된 함수로, 해당 객체가 어떻게 동작할지를 정의
    
    메서드 종류 
    
    1. 인스턴스 메서드
       : 인스턴스의 상태를 조작하거나 동작을 수행함
    2. 
        
        클래스 내부에 정의되는 메서드의 기본
        
        반드시 첫 번째 인자로 인스턴스 자신(self)을 받음
        
        인스턴스의 속성에 접근하거나 변경 가능
        
        생성자 메서드 : 인스턴스 객체가 생성될때 자동으로 호출되는 메서드
        
        
        위의 내용은 이렇게 된다는 뜻
        
        ```python
        def **init**(self, engine, driving_system, sound):
        self.engine = engine
        self.driving_system = driving_system
        self.sound = sound
        ```
        
    3. 클래스 메서드
       : 클래스 변수를 조작하거나 클래스 레벨의 동작을 수행
        
        @classmethod 데코레이터를 사용하여 정의
        
        호출시, 첫번째 인자로 해당 메서드를 호출하는 클래스(cls)가 전달됨
        
        클래스를 인자로 받아 클래스 속성을 변경하거나 읽는데 사용
        
    4. 스태틱 메서드
        : 클래스, 인스턴스와 상관없이 독립적으로 동작하는 메서드
        
        @staticmethod 데코레이터로, 호출시 자동으로 전달받는 인자없음, 도우미 함수