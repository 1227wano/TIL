- **0724**
- 모듈
  : 한 파일로 묶인 변수와 함수의 모음
    특정한 기능을 하는 코드가 작성된 파이썬 파일(.py)
    
  ex) math 내장 모듈 : 수학 관련 변수/함수가 작성된 내장 모듈
    import문 으로 사용 → 같은 이름의 함수가 여러 모듈에 있을때 충돌 방지
    dot(.)연산자로 점의 왼쪽 객체에서 오른쪽 이름을 찾아…
    
  from 절로 사용 → 코드가 간결
    → 단점 : 정의된 모듈에서 import된 변수나 함수의 이름이 같으면 충돌
    
  as 키워드 사용 → 별칭 부여
    → 두 개 이상의 모듈에서 동일명의 변수/함수 클래스 등을 가져올 때 발생하는 충돌 해결
    → 함수/변수 명이 너무 길거나 자주 사용할 때도 유용함
    
    ex)
    import math
    math.pi      #이쪽을 권장
    
    from math import pi, sqrt
    print(pi)  #변수명
    print(sqrt(4))  #함수명
    
    from math import sqrt
    from my_math import sqrt as my_sqrt
    sqrt(4)
    m_sqrt(4)  
    
  사용자 정의 모듈
    직접 정의한 모듈 사용 : .py 파일에 함수 작성
    같은 위치에 다른 .py 파일 생성해서 함수 작성하고 import 함수명
    
- 파이썬 표준 라이브러리
  : Python Standart Library(PSL) = 파이썬 언어와 함께 제공되는 다양한 모듈과 패키지의 모음
    
  패키지
   : 연관된 모듈들을 하나의 디렉토리에 모아 놓은 것
    
    직접 만든 패키지 사용하기
    - 너무 많은 기능이 한 파일에 몰려있으면 관리나 유지보수 어려움
    
  패키지의 종류
    PSI 내부 패키지
    - 기본 패키지
    - 복잡한 작업  쉽게 처리 가능
    - 다양한 패키지 존재
    - 설치 없이 import로 바로 사용 가능
    
  파이썬 외부 패키지 ← 웹으로!
    - 필요한 기능을 직접 설치
    - 사용할 패키지 설치는 pip 사용
        
    패키지 설치
     : 최신 버전 / 특정 버전 / 최소 버전을 명시하여 설치 가능
    ex) $ pip install requests
    
    requests 패키지
     : 파이썬에서 웹(API)에 요청을 보내 응답받는 걸 아주 쉽게 만들어줌
    pip를 통해 설치, requests 를 import하여 웹에 데이터 요청
    
    패키지 사용 목적
    : 모듈 들의 이름공간을 분리하여 충돌 방지, 모듈들을 효율적으로 관리하고 할수있도록 돕기
    
- 제어문
  : 코드의 실행 흐름을 제어하는 데 사용되는 구문 = 상황에 따라 다른 코드를 실행하거나 반복 실행
    ex) 게임에서 점수가 높으면 메시지 출력 등
    
  - 조건문
    if / elif / else
    
    항상 위부터 순차적으로 조건을 만족하는지 확인해간다
    
    ex)
    # 결과: 보통
    dust = 155
    
    if dust > 30:
        print('보통')
    elif dust > 80:
        print('나쁨')
    elif dust > 150:
        print('매우 나쁨')
    else:
        print('좋음')
    (if 문 안에 중첩 가능)

  - 반복문
   for 문 
    반복 가능한 객체의 요소들을 그 개수만큼 반복함 = 반복 횟수가 정해져 있음
     예) 시퀀스 자료형 뿐만 아니라 비 시퀀스 자료형(dict, set) 등도 가능
     ex) students = ['noah', 'john', 'jin']
        for student in students:
            print(student)
        
    - 리스트 내의 첫 항목(noah)이 반복 변수(student)에 할당되고 실행됨
    - 문자열도 순회 가능 ! ← 문자로 구성된 시퀀스니까
    - range 순회 : 특정 숫자 범위 만큼 반복할 때
    - dict 순회 → 비시퀀스 자료형이니 반복 순서가 보장되지 않음을 유의
    - 인덱스로 순회
    : 리스트의 요소가 아닌 인덱스로 접근하여 해당 요소들을 변경
    - 인덱스를 사용하면 리스트의 원하는 위치에 있는 값을 읽거나 변경 가능
        
     ex)
     # 인덱스 순회
     numbers = [4, 6, 10, -8, 5]
    
     for i in range(len(numbers)):     # 이거 많이 쓴대!
        numbers[i] = numbers[i] * 2
    
     print(numbers)
    
    - 중첩된 반복문 → 시간복잡도(n^n)
    - 리스트가 두개 있는데 순서대로 뽑고 싶다면 아래처럼
    
     ex)
     # 중첩 리스트 순회
     elements = [['A', 'B'], ['c', 'd']]
     for elem in elements:
        for item in elem:   #위에서 elem에 담은걸 그대로 아래로
            print(item)
        
   while 문
     반복 횟수가 정해져 있지 않아, 조건이 참인 동안 반복 ⇒ 반드시 종료 조건 필요
        
    반복 제어
    for문 과 while문은 매번 모든 코드를 실행하지만, 때론 일부만 실행할 필요 있음
    
    - break : 해당 키워드를 만나면 남은 코드 무시하고 반복 종료
    - continue : 해당 키워드 만나면 다음 코드 무시하고 다음 반복 수행
    - pass : 아무 동작도 하지 않음을 명시적으로 표현
    코드의 틀 유지나 나중에 내용 채우기 위한 용도
        
    map
    문법 : map(function, iterable)
    반복 가능한 데이터 구조의 모든 요소에 function을 적용, 결과값 들을 map object로 묶어 반환
    SWEA 문제의 input 처럼 문자열 1 2 3이 입력됐을때 활용 예시
    
    ex)
    numbers = [1, 2, 3]
    result = map(str, numbers)
    numbers2 = list(map(int, input().split()))
    print(numbers2)  # [1, 2, 3]
    
    zip
    : 여러 개의 반복 가능한 데이터 구조를 묶어서 같은 위치에 있는 값들을 하나의 tuple로 만들어 모아 zip object로 반환
    
- 참고
  for-else
    for루프가 break를 만나 중단이 아닌 끝까지 완료됐을때만 else 블록 실행
  enumerate
    iterable 객체의 각 요소에 대해 인덱스와 값을 함께 반환하는 내장함수