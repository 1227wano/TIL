**0731**
    - 상속
    : 한 부모 클래스의 속성과 메서드를 다른 자식 클래스가 물려받는것
        
        상속의 이유
        
        1. 코드 재사용
        기존 클래스 수정 없이 기능 확장 가능
        2. 계층 구조 형성
        부모 자식 간의 관계를 표현하고 더 구체적인 클래스 생성 가능
        
        상속 없이 여러 클래스를 구현하는데, 중복된 기능이 보이는 경우, 그 클래스들의 상위 클래스를 생성하여 부모 클래스로 지정한다.
        
        메서드 오버라이딩
        : 부모 클래스의 메서드를 같은 이름, 같은 파라미터 구조로 재정의하는 것
        
        파라미터도 재정의 가능 ← 메서드 호출시 인자로 전달만하면됨
        
        다중 상속
        : 둘 이상의 상위 클래스로부터 여러 행동이나 특징을 상속받을 수 있음
        : 중복된 속성이나 메서드가 있는 경우 상속 순서에 의해 결정됨
        
        ex)
        
        Person 클래스 → Mom, Dad 클래스 상속 → Child 클래스 상속의 경우,
        Mom Dad 에서 중복되는 파라미터 발견 
        → Child 클래스의 매개변수에 Child(Dad, Mom) 라고 되어있다면 Dad → Mom 순으로 상속받음 → 이후에 상속받은 Mom의 정보를 상속받는다
        
        (이러한 문제를 Diamond Problem 이라고 함)
        
        ⇒ 메서드 결정 순서(MRO)
        : 파이썬이 메서드를 찾는 순서에 대한 규칙, 메서드 결정 순서
        
        MRO는 다중 상속에서 어떤 부모 클래스의 메서드를 먼저 사용할 지 순서를 정의함
        
        파이썬은 미리 정해진 MRO를 통해 다중 상속 환경에서도 예측 가능한 방식으로 메서드 탐색이 이루어질 수 있도록 합니다.
        하지만 매번 예상하며 클래스를 짤 순 없다.
        
        ⇒ super() 메서드
        : MRO에 따라, 현재의 부모 클래스의 메서드나 속성에 접근할 수 있게 해주는 내장 함수
        
        MRO가 필요한 이유
        부모클래스들이 여러 번 액세스되지 않도록. 각 클래스에서 지정된 좌우로 가는 순서를 보존하고, 각 부모를 오직 한번만 호출하고, 부모들의 우선순위에 영향을 주지 않으면서 서브 클래스를 만드는 단조적인 구조 형
        
    - 에러와 예외
        
        디버깅 방법
        : print 함수, Python tutor, breakpoint 등
        
        에러
        
        문법 에러
        : 프로그램의 구문이 올바르지 않은 경우(오타, 누락 등)
        
        예외
        : 프로그램 실행 중에 감지되는 에러, 처리하지 않으면 프로그램 종료됨
        
        내장 예외
        
        - ZeroDIvisionError
        - NamaError
        - TypeError (타입불일치, 인자누락, 인자초과, 인자타입불일치)
        - ValueError
        - IndexError
        - KeyError
        - ModuleNotFouneError
        - ImportError
        - KeyboardInterrupt
        - IndentationError
        
    - 예외 처리
        
        try, except 구문을 사용해 특정 예외를 잡아내고 원하는 동작을 수행할 수 있다
        
         오류메시지를 보여주거나 대체 로직을 실행할 수 있다.
        
        try : 예외가 발생할 수 있는 코드
        
        except : 예외가 발생했을 때 실행할 코드
        
        else : 예외가 발생하지 않았을 때 실행할 코드
        
        finally : 예외 발생 여부와 상관없이 항상 실행할 코드
        
        복수 예외 처리
        
        ```python
        try:
            num = int(input('100을 나눌 값을 입력하시오 : '))
            print(100 / num)
        except ValueError:
            print('숫자를 넣어주세요.')
        except ZeroDivisionError:
            print('0으로 나눌 수 없습니다.')
        except:   # 위의 두개의 에러가 아닌 에러의 경우
            print('에러가 발생했습니다.')
        ```
        
        else & finally
        
        ```python
        try:
            x = int(input('숫자를 입력하세요: '))
            y = 10 / x
        except ZeroDivisionError:
            print('0으로 나눌 수 없습니다.')
        except ValueError:
            print('유효한 숫자가 아닙니다.')
        else:
            print(f'결과: {y}')
        finally:
            print('프로그램이 종료되었습니다.')
        ```
        
    - 참고
        
        예외처리 주의사항
        
        - as 키워드
        : except 블록에서 예외 객체(예외발생시 예외에 대한 정보를 담고있는 객체)를 받아 상세한 예외 정보를 활용 가능
        - try-except 와 if-else 함께 사용 가능
        - EAFP & LBYL
        : EAFP - 예외처리를 중심으로 코드를 작성하는 접근 방식(try-except)
        : LBYL - 값 검사를 중심으로 코드를 작성하는 접근 방식(if-else)
        
        클래스 사용의 효능
        : 관련된 데이터와 기능을  한 덩어리로 묶어 구조를 명확히 함
        
- 0801
    
    PJT
    
    데이터 사이언스
    
    - jupyter notebook 설치
    : cmd 에서 pip install notebook
    : 작업 파일에서 터미널로 실행 → jupyter notebook
    
    필요한 정보를 추출하는 5단계
    
    1. 문제 정의 : 해결하고자 하는 문제 정의
    2. 데이터 수집 : 문제 해결에 필요한 데이터 수집
    3. 데이터 전처리(정제) : 실질적인 분석을 위해 데이터 가공 단계, 데이터 오류 제거 밑 형식 변환
    4. 데이터 분석 : 정보 추출 단계
    5. 결과 해석 및 공유 : 결과 시각화
    
    <데이터 수집>
    
    - 웹 스크래핑
    - 웹 크롤링
    - Open API 활용
    - 데이터 공유 플랫폼 활용
    : 캐글, Data.world, 데이콘, 공공데이터포털
    
    캐글 : 경진대회 플랫폼
    
    자주 사용되는 파이썬패키지
    
    - Numpy : 수학 계산용 패키지
    : 다차원 배열을 쉽게 처리하고 효율적으로 사용하도록 지원
    : 장점 - 파이썬 반복문에 비해 행렬 연산이 빠르다
    : 한계 - 데이터에 레이블 붙이거나, 누락된 데이터 작업시 유연성 부족, 그룹화 피벗 등 구조화 부족
    - Pandas : 원하는 데이터만 추출하거나 데이터를 분석할 때 활용되는 패키지
    : 마치 프로그래밍 버전의 엑셀
    - Matplotlib : 그래프를 그려주는 패키지
    : 데이터 시각화
    
    API를 활용한 데이터 수집
    
    Dog API 사용 : request Library를 이용하여 파이썬에서 API를 사용해봅니다
    
    API KEY와 같이 외부로 노출되면 안되는 값 (내 로컬에서만 사용하면 되는 값)
    
    ⇒ 환경 변수로 관리
    

---

-