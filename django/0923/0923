0923 Model

- Model
    
    : DB와 파이썬 클래스(객체)로 추상화된 형태로 상호작용
    
    - Model을 통한 DB관리
    
    ![image.png](attachment:14055b65-37ef-4a19-8f0a-506c8c6bbe25:image.png)
    
    - Model Class
        
        : DB의 테이블을 정의, 조작하는 기능을 제공 (테이블 구조를 설계하는 청사진)
        
        ![image.png](attachment:5692da53-509f-47a9-9d36-f41929645cab:image.png)
        
        → django.db.models 모듈의 Model이라는 부모클래스를 상속받음
        
        → Model은 model에 관련된 모든 코드가 이미 작성돼있는 Class
        
        ⇒ 테이블 구조를 어떻게 설계할지에 대한 코드만 작성! (상속을 활용한 FW기능)
        
        → ModelField : 데이터의 유형과 제약조건을 정의 (max_length같은건 선택사항)
        
- Model Field
    
    : DB 테이블의 필드 정의, 데이터타입 및 제약조건 명
    
    1. Field types : DB에 저장될 데이터의 종류
    2. Field options : 필드의 동작과 제약조건 정의
    
    - Field Types
        
        : models 모듈의 클래스로 정의되어있음
        
        - 문자열 필드
            - CharField() : 제한된 길이의 문자열을 저장
            - TextField() : 길이 제한이 없는 대용량 텍스트를 저장(무한대는 아니며 시스템에 따라)
        - 숫자 필드
            - IntegerField, FloatField
        - 날짜/시간 필드
            - DateField, TimeField, DateTimeField
        - 파일 관련 필드
            - FileField, ImageField
    - 제약 조건
        - null : DB에서 NULL값을 허용할지 여부 결정 ( 기본값 False )
        - blank : form에서 빈값을 허용할지 여부 결정 ( 기본값 False )
        - default : 필드의 기본값을 설정
    
- Migrations ( DB로~! )
    
    : model 클래스의 변경사항을 DB에 최종 반영하는 방법
    
    모든 변경사항이 코드로 관리되어 협업시 모델 변경 내역에 대한 추적과 공유가 수월함
    
    1. 모델 클래스 작성/수정
    2. makemigrations 명령어 : python 코드로 된 migration 파일 만드는 방법
    3. 생성된 최종 설계도 마이그레이션 파일을 DB에 반영 
        
        migrate 명령어로 SQL 실행 (자동변환)
        
        → migration 파일을 직접 수정하지 말기
        
    
- 추가 Migrations
    
    이미 기존 테이블이 존재하는 경우, 새 필드를 추가할 때 문제가 발생할 수 있음
    
    1. 새로운 필드 작성 → 모델 클래스 수정
        - auto_now : 데이터가 저장될 때마다 자동으로 현재 날짜시간을 저장
        - auto_now_add : 데이터가 처음 생성될 때만 자동으로 현재 날짜시간을 저장
    2. 새로운 필드 추가 후 makemigrations 명령어
        
        → 추가된 migration은 아래와 같이 기존 migration 파일에 의존하여 생성됨
        
        ```python
        class Migration(migrations.Migration):
        
            dependencies = [
                ('articles', '0001_initial'),
            ]
        ```
        
        → 의존되는 기존 파일이 없으면 추가된 파일도 적용안됨
        
- Admin site
    - 관리자 인터페이스
        
        : Django가 추가 설치 및 설정없이 자동으로 제공하는 관리자 인터페이스
        
        1. Django admin 계정 설정
            1. 터미널 열기
            2. python [manage.py](http://manage.py) createsuperuser
            3. 정보 입력
        2. DB에 생성된 admin 계정 확인
        3. 관리자 인터페이스 페이지 → 접속 확인
        4. Admin site 모델 클래스 등록 및 확인
        5. 데이터 생성, 수정, 삭제 테스