0925 ORM with view

- Read
    
    단일 게시글 조회 → pk넘기기 (pk라는 컬럼을 pk라는 변수로 받으면 pk=pk임)
    
- Create
    
    Create 로직을 구현하기 위해 view 함수 두 개가 필요
    
    → new : 사용자 입력 데이터를 받을 페이지를 렌더링
    
    → create : 사용자가 입력한 요청 데이터를 받아 DB에 저장
    
- HTTP request methods
    
    HTTP : 네트워크 상에서 데이터(리소스)를 주고받기위한 약속
    
    - GET : URL에 데이터가 노출되고, 캐싱 가능
        - 데이터 전송 : URL의 쿼리문자열로
        - 데이터 제한 : URL 길이에 제한이 있어 대량의 데이터 전송에는 부적합
        - 브라우저 히스토리 : 요청URL이 기록됨
        - 캐싱 : 브라우저는 GET 요청의 응답을 로컬에 저장 가능
            
            → 동일한 URL로 재요청할때 서버에 접속하지 않고 저장된 결과 사용 (로딩시간 단축)
            
    - POST : 요청 본문에 데이터, 데이터 노출 없음
        - 데이터 전송 : HTTP Body를 통해 데이터 전송
        - 데이터 제한 : GET에 비해 더 많은 양 전송 가능
        - 브라우저 히스토리 : POST는 안남음
        - 캐싱 : 기본적으로 캐시 불가( 일반적으로 서버의 상태를 변경하는 작업을 해서)
    
- HTTP response status code
    
    : 서버가 클라이언트의 요청에 대한 처리 결과를 나타내는 3자리 숫자
    
    403 : 권한 때문에 거절
    
    - CSRF : 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행동(글쓰기ㅡ, 정보수정 등)을 
    특정 웹사이트에 요청하게 만드는 해킹 방식
        1. 신뢰할 수 있는 관계 (로그인)
        2. 악성 위임장 (악성 링크)
        3. 나도 모르는 날인 (요청 전송)
        4. 은행의 착각(공격 성공)
    - CSRF 공격의 방어
        
        → CSRF 토큰 사용 : 일회용 비밀 코드를 함께 보내도록 하여 위조된 요청을 막아줌
        
        ⇒ django가 직접 제공한 페이지에서 데이터를 작성한 것인지 확인해야해서
        
        - 왜 POST일때만? → DB에 조작을 가하거나, 리소스의 변경을 요청하니까
    
- Redirect
    
    서버는 데이터 저장 후 페이지를 응답하는 것이 아닌 사용자를 적절한 기존 페이지로 보내야 함~
    
    ( 클라이언트가 GET 요청을 한번 더 보내도록 응답 )
    
    redirect() 함수로 create view 함수 변경
    
    ![image.png](attachment:4eab5d12-5c94-4594-a0cf-daff2ef249a4:image.png)
    
- Delete
    1. 어떤 게시글 삭제할 건지 조회
    2. 조회한 게시글 삭제
    3. 메인 페이지로 리다이렉트
    
- Update
    
    두 개의 함수 필요
    
    - edit : 사용자 입력 데이터를 받을 페이지를 렌더링
    - update : 사용자가 입력한 요청 데이터를 받아 DB에 저